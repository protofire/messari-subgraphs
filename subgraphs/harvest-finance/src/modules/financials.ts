import { BigInt } from '@graphprotocol/graph-ts'
import { protocol as protocols, timeSeries } from '../modules'

export function updateFinancials(blockNumber: BigInt, timestamp: BigInt): void {
  let financialMetrics = timeSeries.financials.loadOrCreateDailySnapshot(timestamp, blockNumber)
  const protocol = protocols.loadOrCreateYieldAggregator()

  financialMetrics.totalValueLockedUSD = protocol.totalValueLockedUSD
  financialMetrics.cumulativeSupplySideRevenueUSD = protocol.cumulativeSupplySideRevenueUSD
  financialMetrics.cumulativeProtocolSideRevenueUSD = protocol.cumulativeProtocolSideRevenueUSD
  financialMetrics.cumulativeTotalRevenueUSD = protocol.cumulativeTotalRevenueUSD
  financialMetrics.protocolControlledValueUSD = protocol.protocolControlledValueUSD

  /*
TODO
  //" Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  financialMetrics.dailySupplySideRevenueUSD = 0
    // " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee. "
    protocol.financialMetrics.dailyProtocolSideRevenueUSD = 0
  // " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  financialMetrics.dailyTotalRevenueUSD = 0
*/

  financialMetrics.save()
}
